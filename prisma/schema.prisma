generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // This tells Prisma to use the shadow database
}

// UserProfile model
model UserProfile {
  id             String     @id @default(uuid()) // Using UUID
  name           String
  email          String     @unique
  username       String     @unique
  profilePicture String?
  password       String
  description    String?
  loves          Love[] // Relation to the Loves table
  struggles      Struggle[] // Relation to the Struggles table
  activities     Activity[] // Relation to the Activities table
  funFacts       FunFact[] // Relation to the FunFacts table
  chats          Chat[] // Relation to the Chats table
  journal        Journal[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@map("user_profiles") // Optional: This maps the table name to "user_profiles" in your Azure SQL
}

model Journal {
  id          String   @id @default(uuid()) // UUID for unique identification
  title       String // Journal title
  description String? // Optional journal description
  createdAt   DateTime @default(now()) // Timestamp for creation
  updatedAt   DateTime @updatedAt // Timestamp for updates

  // Foreign key relation to UserProfile
  userId      String
  userProfile UserProfile @relation(fields: [userId], references: [id])

  @@map("journals") // Optional: This maps the table name to "journals" in your Azure SQL
}

// Table for loves
model Love {
  id            String      @id @default(uuid()) // Using UUID
  content       String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId String

  @@map("loves")
}

// Table for struggles
model Struggle {
  id            String      @id @default(uuid()) // Using UUID
  content       String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId String

  @@map("struggles")
}

// Table for activities
model Activity {
  id            String      @id @default(uuid()) // Using UUID
  content       String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId String

  @@map("activities")
}

// Table for fun facts
model FunFact {
  id            String      @id @default(uuid()) // Using UUID
  content       String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId String

  @@map("fun_facts")
}

// Table for past chats
model Chat {
  id            String      @id @default(uuid()) // Using UUID
  threadsId     String // Store the thread ID from OpenAI or chat service
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("chats") // Optional: This maps the table name to "chats"
}
